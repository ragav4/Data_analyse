# -*- coding: utf-8 -*-
"""Daily_Transport_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15q4_vsWPK_DFE7pNwFykI3tKbqHh3rp7
"""

import pandas as pd
file_path = "Dpt.csv"
data = pd.read_csv(file_path)

data.info()

data.head()

data['Date'] = pd.to_datetime(data['Date'], format='%d/%m/%Y') # Changed 'date' to 'data' to refer to the DataFrame
data = data.set_index('Date')

data = data.fillna(method='ffill')
data.info()

import matplotlib.pyplot as plt
plt.figure(figsize=(14,10))
for i ,column in enumerate(data.columns,1):
    plt.subplot(3,2,i)
    plt.plot(data.index,data[column],label = column)
    plt.title(f'{column} passenger journeys')
    plt.xlabel('Date')
    plt.ylabel('Journeys')
    plt.legend()
plt.tight_layout()
plt.show()

from statsmodels.tsa.holtwinters import ExponentialSmoothing

forecast_period = 7

forecast_results = {}
last_date =data.index.max()
for column in data.columns:
    if column not in ['Other','Total']:
        model = ExponentialSmoothing(data[column], trend='add', seasonal='add', seasonal_periods=365)
        fit = model.fit()
        forecast = fit.forecast(forecast_period)
        forecast_results[column] = forecast

forecast_df = pd.DataFrame(forecast_results)
forecast_df.index = pd.date_range(last_date + pd.Timedelta(days=1), periods=forecast_period)

forecast_df

# Calculate monthly averages to observe growth or decline patterns over time
monthly_avg = data.resample('M').mean()
monthly_avg

# Identify peak days by finding the highest values in each service type
peak_days = data.idxmax()
peak_days

# Calculate growth rate by taking the percentage change over months for each service type
monthly_growth_rate = monthly_avg.pct_change().dropna() * 100
monthly_growth_rate

# Determine weekday vs weekend averages for each service type
data['weekday'] = data.index.dayofweek
weekday_vs_weekend = data.groupby(['weekday']).mean()
weekday_vs_weekend

forecast_df

forecast_df.plot()

peakdays = forecast_df.idxmax()
peakdays

forecast_df.describe()